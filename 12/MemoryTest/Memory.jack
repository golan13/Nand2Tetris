// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;

		/** Initializes the class. */
    function void init() {
        let ram = 0;
		let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
	}

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
	}

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
		return;
	}

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int freeSize, nextFree, currFree, prevFree, block;
        var boolean loop;
        let loop = true;
        let prevFree = 0;
        let nextFree = heap[0];
		let freeSize = heap[1];
        while((~(nextFree = 0)) & loop){
            if(~(freeSize < (size + 2))){
                let loop = false;
            } else {
                let prevFree = heap[currFree];
                let currFree = heap[nextFree];
                let nextFree = heap[currFree];
                let freeSize = heap[currFree + 1];
            }
		} if(~(prevFree = 0)){
            let heap[prevFree] = heap[nextFree];
        }
        let heap[currFree] = 0;
        let heap[currFree + 1] = freeSize - (size + 2);
		let block = heap[currFree] + heap[currFree + 1] + 3;
        let heap[block - 2] = 0;
        let heap[block - 1] = size;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int currFree, prevFree;
        let currFree = heap[0];
        let prevFree = 0;
        while(~(currFree = 0)){
            let prevFree = currFree;
            let currFree = heap[currFree];
        }
        let heap[prevFree] = o - 2;
        return;
    }    
}
