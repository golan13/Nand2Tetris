// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let str = Array.new(1);
            let length = 0;
            return this;
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, num, j, sign;
        let i = 0;
        let num = 0;
        let sign = 1;
        if (str[0] = 45){
            let sign = -1;
            let i = 1;
        }
        while (i < length){
            let j = str[i];
            if ((j < 48) | (j > 57)){
                return num;
            }
            let num = (num * 10) + (str[i] - 48);
            let i = i + 1; 
        }
        return (num * sign);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int numLength, i, j;
        if (val < 0){
            let numLength = 1;
        } else {
            let numLength = 0;
        }
        let i = val;
        while (~(i = 0)){
            let numLength = numLength + 1;
            let i = i / 10;
        }
        let length = numLength;
        while (~(val = 0)){
            let j = (val - ((val / 10) * 10));
            if (j < 0){
                let j = -j;
            }
            let str[numLength - 1] = j + 48;
            let val = val / 10;
            let numLength = numLength - 1;
        } 
        if (numLength){
            let str[numLength - 1] = 45;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
